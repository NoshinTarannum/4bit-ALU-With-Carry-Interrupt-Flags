LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY ALU IS
	PORT (
		inp_a      : IN  SIGNED (3 DOWNTO 0);
		inp_b      : IN  SIGNED (3 DOWNTO 0);
		inp_c      : IN  STD_LOGIC;
		sel        : IN  STD_LOGIC_VECTOR (3 DOWNTO 0);
		carry_f    : OUT STD_LOGIC; --1 if carry is present, o/w 0
		sign_f     : OUT STD_LOGIC; --1 if carry is 1 ie -ve, o/w 0
		zero_f     : OUT STD_LOGIC; --1 if o/p is 0, o/w 0
		carry_outp : OUT STD_LOGIC;
		outp       : OUT SIGNED (3 DOWNTO 0));
END ALU;

ARCHITECTURE Behavioral OF ALU IS

	SIGNAL temp_op   : SIGNED (4 DOWNTO 0) := "00000";
	SIGNAL temp_c_op : STD_LOGIC           := '0';
	SIGNAL temp_c    : STD_LOGIC           := '0';
	SIGNAL temp_s    : STD_LOGIC           := '0';
	SIGNAL temp_z    : STD_LOGIC           := '0';
	
BEGIN

	PROCESS (inp_a, inp_b, inp_c, sel)
	BEGIN
	
		CASE sel IS
		
			WHEN "0000" =>
				temp_op <= ('0' & (inp_a + inp_b)); --addition
				
			WHEN "0001" =>
				temp_op <= ('0' & (inp_a - inp_b)); --subtraction
				
			WHEN "0010" =>
				temp_op <= ('0' & (inp_a + 1)); --add 1
				
			WHEN "0011" =>
				temp_op <= ('0' & (inp_a - 1)); --sub 1
				
			WHEN "0100" =>
				temp_op <= ('0' & (inp_a AND inp_b)); --AND operation
				
			WHEN "0101" =>
				temp_op <= ('0' & (inp_a NAND inp_b)); --NAND operation
				
			WHEN "0110" =>
				temp_op <= ('0' & (inp_a OR inp_b)); --OR operation
				
			WHEN "0111" =>
				temp_op <= ('0' & (inp_a NOR inp_b)); --NOR operation
				
			WHEN "1000" =>
				temp_op <= ('0' & (NOT inp_a)); --NOT operation
				
			WHEN "1001" =>
				temp_op <= ('0' & (inp_a XOR inp_b)); --XOR operation
				
			WHEN "1010" =>
				temp_op <= ('0' & (inp_a XNOR inp_b)); --XNOR operation
				
			WHEN "1011" =>
				temp_op <= (('0' & inp_a) + ('0' & inp_b) + ("0000" & inp_c)); --ADC
				
			WHEN "1100" =>
				temp_op <= (('0' & inp_a) - ('0' & inp_b) - ("0000" & inp_c)); --SBB
				
			WHEN OTHERS => NULL;
			
		END CASE;
		
		temp_c_op <= temp_op(4);
		
		IF temp_c_op = '1' THEN
			temp_c <= '1';
		ELSIF temp_c_op = '0' THEN
			temp_c <= '1';
		END IF;
		
	END PROCESS;
	
	temp_z     <= '1' WHEN temp_op = "00000" ELSE '0';
	temp_s     <= STD_LOGIC(temp_op(3));
	carry_f    <= temp_c;
	sign_f     <= temp_s;
	zero_f     <= temp_z;
	carry_outp <= temp_c_op;
	outp       <= temp_op(3 DOWNTO 0);
	
END Behavioral;
